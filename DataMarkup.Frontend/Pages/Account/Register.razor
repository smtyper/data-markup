@page "/Account/Register"
@using DataMarkup.Entities.Parameters.Account
@using DataMarkup.Frontend.Extensions
@using Microsoft.AspNetCore.Components
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<EditForm Model="@_registerParameters" OnValidSubmit="@RegisterAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <div class="mb-3 text-center">
                <h3>Registration</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="_registerParameters.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => _registerParameters.Username" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="_registerParameters.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => _registerParameters.Email" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="_registerParameters.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => _registerParameters.Password" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-dark">Login</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private readonly RegisterParameters _registerParameters = new();

    private async void RegisterAsync()
    {
        var registerResult = await HttpClient.RegisterAsync(_registerParameters);

        if (registerResult?.Successful is true)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var message = registerResult?.Message ?? "Registration failed. Check requirements and try again.";
            
            await JsRuntime.InvokeVoidAsync("alert", message);
        }
    }
}