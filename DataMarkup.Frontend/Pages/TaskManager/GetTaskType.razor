@page "/TaskManager/get-task-type/{IdString}"
@attribute [Authorize]

@using DataMarkup.Entities.Views
@using Task = System.Threading.Tasks.Task
@using DataMarkup.Entities
@using DataMarkup.Entities.Parameters.TaskManager
@using DataMarkup.Frontend.Models

@inject ApiHttpClient ApiHttpClient;
@inject NavigationManager NavigationManager;

<div class="container-fluid float-left mt-3">
    <h3>Task type:</h3>
    
    @if (_alert.Show)
    {
        <div class="alert alert-@(_alert.TypeString)" role="alert">
            @_alert.Message
        </div>
    }
    
    <div class="row-mb-4">
        <div class="col-md-6">
            <EditForm Model="_updateTaskTypeParameters" OnValidSubmit="@UpdateTaskTypeAsync">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label class="fw-bold">Task name</label>
                    <InputText @bind-Value="@_updateTaskTypeParameters.Name" class="form-control mb-3"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.Name"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Solutions count</label>
                    <InputNumber @bind-Value="@_updateTaskTypeParameters.SolutionsCount" class="form-control mb-3"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.SolutionsCount"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Payment</label>
                    <InputNumber @bind-Value="@_updateTaskTypeParameters.Payment" class="form-control mb-3"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.Payment"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Instruction</label>
                    <InputTextArea @bind-Value="@_updateTaskTypeParameters.Instruction" class="form-control mb-3"
                                   rows="10"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.Instruction"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Access type</label>
                    <InputSelect @bind-Value="_updateTaskTypeParameters.AccessType" class="form-select mb-3">
                        @foreach (var accessType in Enum.GetValues(typeof(AccessType)))
                        {
                            <option value="@accessType"> @accessType</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => _updateTaskTypeParameters.AccessType"/>
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-dark">Update</button>
                </div>

            </EditForm>
        </div>
    </div>

    <h3>Questions:</h3>

    @foreach (var questionRowGroup in (_questionTypes)
        .Select((question, index) => (question, index))
        .GroupBy(pair => pair.index / 3))
    {
        <div class="row">
            @foreach (var (question, _) in questionRowGroup)
            {
                <div class="col-md-3">
                    <div class="card mb-2">
                        <div class="card-body">
                            <h5 class="card-title fw-bold mb-2">Static content:</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@($"{question.StaticContent}")</h6>
                            <p class="card-text">@($"Question regex: {question.DynamicContentConstraint}")</p>
                            <p class="card-text">@($"Answer regex: {question.AnswerConstraint}")</p>
                            <p class="card-text">@($"Answer description: {question.AnswerDescription}")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

</div>

@code {
    [Parameter]
    public string? IdString { get; set; }
    
    private Guid _id;
    private bool _successful;
    private UpdateTaskTypeParameters _updateTaskTypeParameters = new();
    private IReadOnlyCollection<QuestionType> _questionTypes = Array.Empty<QuestionType>();

    private Alert _alert = new() { Show = false };
    
    protected override async Task OnInitializedAsync()
    {
        if (IdString is null)
            NavigationManager.NavigateTo("/NotFound");
        
        _id = Guid.Parse(IdString!);
        var getTaskTypeResult = await ApiHttpClient.GetTaskTypeAsync(_id);

        _successful = getTaskTypeResult?.Successful is true;

        var taskType = getTaskTypeResult!.TaskType!;

        if (_successful)
        {
            _updateTaskTypeParameters = new UpdateTaskTypeParameters
            {
                TaskTypeId = _id,
                Name = taskType.Name,
                SolutionsCount = taskType.SolutionsCount,
                Payment = taskType.Payment,
                Instruction = taskType.Instruction,
                AccessType = taskType.AccessType
            };
            _questionTypes = taskType.QuestionTypes;
        }
        else
            NavigationManager.NavigateTo("/NotFound");
        
        await base.OnInitializedAsync();
    }

    private async Task UpdateTaskTypeAsync()
    {
        var updateResult = await ApiHttpClient.UpdateTaskTypeAsync(_updateTaskTypeParameters);

        if (updateResult?.Successful is true)
            await ShowAlertAsync(AlertType.Success, "Task type was successfully updated.");
        else
            await ShowAlertAsync(AlertType.Danger, updateResult?.Message ?? "Something goes wrong. Try again later.");
    }

    private async ValueTask ShowAlertAsync(AlertType alertType, string message)
    {
        _alert = _alert with
        {
            Show = true,
            Message = message,
            Type = alertType
        };
        StateHasChanged();

        await Task.Delay(3000);

        _alert = _alert with { Show = false };
        StateHasChanged();
    }

}