@page "/TaskManager/get-task-type/{IdString}"
@attribute [Authorize]

@using DataMarkup.Entities.Views
@using Task = System.Threading.Tasks.Task
@using DataMarkup.Entities

@inject ApiHttpClient ApiHttpClient;
@inject NavigationManager NavigationManager;

<div class="container-fluid float-left mt-3">
    <h3>Task type:</h3>
    
    <div class="row-mb-4">
        <div class="col-md-6">
            <EditForm Model="_taskType">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label class="fw-bold">Task name</label>
                    <input value="@_taskType.Name" class="form-control mb-3" disabled/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Solutions count</label>
                    <input value="@_taskType.SolutionsCount" class="form-control mb-3" disabled/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Payment</label>
                    <input value="@_taskType.Payment" class="form-control mb-3" disabled/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Instruction</label>
                    <textarea value="@_taskType.Instruction" class="form-control mb-3" rows="10" disabled></textarea>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Access type</label>
                    <select type="" value="@_taskType.AccessType" class="form-select mb-3" disabled>
                        @foreach (var accessType in Enum.GetValues(typeof(AccessType)))
                        {
                            <option value="@accessType"> @accessType</option>
                        }
                    </select>
                </div>

            </EditForm>
        </div>
    </div>

    <h3>Questions:</h3>

    @foreach (var questionRowGroup in (_taskType.QuestionTypes ?? Array.Empty<QuestionType>())
        .Select((question, index) => (question, index))
        .GroupBy(pair => pair.index / 3))
    {
        <div class="row">
            @foreach (var (question, _) in questionRowGroup)
            {
                <div class="col-md-3">
                    <div class="card mb-2">
                        <div class="card-body">
                            <h5 class="card-title fw-bold mb-2">Static content:</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@($"{question.StaticContent}")</h6>
                            <p class="card-text">@($"Question regex: {question.DynamicContentConstraint}")</p>
                            <p class="card-text">@($"Answer regex: {question.AnswerConstraint}")</p>
                            <p class="card-text">@($"Answer description: {question.AnswerDescription}")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

</div>

@code {
    [Parameter]
    public string? IdString { get; set; }
    
    private bool _successful;
    private TaskType _taskType = new();

    protected override async Task OnInitializedAsync()
    {
        var id = Guid.Parse(IdString!);
        var getTaskTypeResult = await ApiHttpClient.GetTaskTypeAsync(id);

        _successful = getTaskTypeResult?.Successful is true;

        if (_successful) 
            _taskType = getTaskTypeResult?.TaskType!;
        else
            NavigationManager.NavigateTo("/NotFound");
    }

}