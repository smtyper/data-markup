@page "/TaskManager/task-type/{IdString}"
@inherits Base
@attribute [Authorize]

@using DataMarkup.Entities.Views
@using Task = System.Threading.Tasks.Task
@using DataMarkup.Entities
@using DataMarkup.Entities.Parameters.TaskManager
@using DataMarkup.Frontend.Models

@inject ApiHttpClient ApiHttpClient;
@inject NavigationManager NavigationManager;

<div class="container-fluid float-left mt-3">
    @if (Alert.Show)
    {
        <AlertMessage AlertType="@Alert.TypeString"
                      Title="@Alert.Title"
                      Message="@Alert.Message"></AlertMessage>
    }
    
    <div class="row mb-2">
        <div class="col-md-6">
            <h3 class="float-start">Task type:</h3>
        </div>
        
        <div class="col-md-6">
            <div class="mb-4 float-end">
                <a class="btn btn-dark" href="/TaskManager/instances/@IdString/1">
                    To instances
                </a>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-6">
            <EditForm Model="_updateTaskTypeParameters" OnValidSubmit="@UpdateTaskTypeAsync">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label class="fw-bold">Task name</label>
                    <InputText @bind-Value="@_updateTaskTypeParameters.Name" class="form-control mb-3"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.Name"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Solutions count</label>
                    <InputNumber @bind-Value="@_updateTaskTypeParameters.SolutionsCount" class="form-control mb-3"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.SolutionsCount"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Payment</label>
                    <InputNumber @bind-Value="@_updateTaskTypeParameters.Payment" class="form-control mb-3"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.Payment"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Instruction</label>
                    <InputTextArea @bind-Value="@_updateTaskTypeParameters.Instruction" class="form-control mb-3"
                                   rows="10"/>
                    <ValidationMessage For="() => _updateTaskTypeParameters.Instruction"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Access type</label>
                    <InputSelect @bind-Value="_updateTaskTypeParameters.AccessType" class="form-select mb-3">
                        @foreach (var accessType in Enum.GetValues(typeof(AccessType)))
                        {
                            <option value="@accessType"> @accessType</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => _updateTaskTypeParameters.AccessType"/>
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-dark">Update</button>
                </div>
            </EditForm>
        </div>
        
        <div class="col-md-6">
            @if (_sourceTaskType.AccessType is AccessType.WhiteList)
            {
                <EditForm Model="_addPermissionParameters" OnValidSubmit="AddPermissionAsync">
                    <DataAnnotationsValidator/>

                    <label class="fw-bold">Add permission to user:</label>
                    <div class="input-group">
                        <InputText @bind-Value="@_addPermissionParameters.Username" class="form-control mb-2"
                                   placeholder="Username"/>
                        <div class="input-group-append">
                            <button type="submit" class="input-group-text btn-dark">Add</button>
                        </div>
                    </div>
                </EditForm>

                @if (_permissions.Any())
                {
                    <label class="fw-bold">Current permissions:</label>
                }

                <ul class="list-group">
                    @foreach (var permission in _permissions)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @permission.Username
                            <button class="input-group-text btn-danger"
                                    @onclick="@(async () => await RemovePermissionAsync(permission.Username))">
                                Remove
                            </button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>

    <h3>Questions:</h3>

    @foreach (var questionRow in _questionTypes
        .Select(questionType => new Card
        {
            Title = "Static content:",
            Subtitle = questionType.StaticContent,
            TextAreas = new []
            {
                $"Question regex: {questionType.DynamicContentConstraint}",
                $"Answer regex: {questionType.AnswerConstraint}",
                $"Answer description: {questionType.AnswerDescription}"
            }
        })
        .SepareteIntoRows(3))
    {
        <div class="row">
            @foreach (var (card, _, columnWidth) in questionRow)
            {
                <CardBox Width="@columnWidth"
                         Title="@card.Title"
                         SubTitle="@card.Subtitle"
                         TextAreas="@card.TextAreas"/>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string? IdString { get; set; }
    
    private Guid _id;
    private TaskType _sourceTaskType = new() { AccessType = AccessType.Free };

    private AddPermissionParameters _addPermissionParameters = new();
    private UpdateTaskTypeParameters _updateTaskTypeParameters = new();
    private IReadOnlyCollection<QuestionType> _questionTypes = Array.Empty<QuestionType>();
    private IReadOnlyCollection<Permission> _permissions = Array.Empty<Permission>();

    protected override async Task OnInitializedAsync()
    {
        if (IdString is null)
            NavigationManager.NavigateTo("/NotFound");
        
        _id = Guid.Parse(IdString!);
        var getTaskTypeResult = await ApiHttpClient.GetTaskTypeAsync(_id);

        var successful = getTaskTypeResult?.Successful is true;

        _sourceTaskType = getTaskTypeResult!.TaskType!;
        _addPermissionParameters = _addPermissionParameters with { TaskTypeId = _id };

        if (successful)
        {
            _updateTaskTypeParameters = new UpdateTaskTypeParameters
            {
                TaskTypeId = _id,
                Name = _sourceTaskType.Name,
                SolutionsCount = _sourceTaskType.SolutionsCount,
                Payment = _sourceTaskType.Payment,
                Instruction = _sourceTaskType.Instruction,
                AccessType = _sourceTaskType.AccessType
            };
            _questionTypes = _sourceTaskType.QuestionTypes;
            _permissions = _sourceTaskType.Permissions;
        }
        else
            NavigationManager.NavigateTo("/NotFound");
        
        await base.OnInitializedAsync();
    }

    private async Task UpdateTaskTypeAsync()
    {
        var updateResult = await ApiHttpClient.UpdateTaskTypeAsync(_updateTaskTypeParameters);

        if (updateResult?.Successful is true)
        {
            await ShowAlertAsync(AlertType.Success, "Task type was successfully updated.");
            NavigationManager.NavigateTo($"/TaskManager/task-type/{IdString}");
        }
        else
            await ShowAlertAsync(AlertType.Danger, updateResult?.Message ?? DefaultErrorMessage);
    }

    private async Task AddPermissionAsync()
    {
        var addPermissionResult = await ApiHttpClient.AddPermissionAsync(_addPermissionParameters);

        if (addPermissionResult?.Successful is true)
        {
            await ShowAlertAsync(AlertType.Success, "User permission added successfully.");
            NavigationManager.NavigateTo($"/TaskManager/task-type/{IdString}");
        }
        else
            await ShowAlertAsync(AlertType.Danger, addPermissionResult?.Message ?? DefaultErrorMessage);
    }
    
    private async Task RemovePermissionAsync(string username)
    {
        var removePermissionParameters = new RemovePermissionParameters { Username = username, TaskTypeId = _id };
        var addPermissionResult = await ApiHttpClient.RemovePermissionAsync(removePermissionParameters);

        if (addPermissionResult?.Successful is true)
        {
            await ShowAlertAsync(AlertType.Success, "User permission successfully removed.");
            NavigationManager.NavigateTo($"/TaskManager/task-type/{IdString}");
        }
        else
            await ShowAlertAsync(AlertType.Danger, addPermissionResult?.Message ?? DefaultErrorMessage);
    }
}