@page "/TaskManager/instances/{IdString}"
@inherits Base
@attribute [Authorize]

@using DataMarkup.Entities.Views
@using Task = System.Threading.Tasks.Task
@using DataMarkup.Entities.Parameters.TaskManager
@using DataMarkup.Frontend.Models

@inject ApiHttpClient ApiHttpClient;
@inject NavigationManager NavigationManager;

<div class="container-fluid float-left mt-3">

    @if (Alert.Show)
    {
        <AlertMessage AlertType="@Alert.TypeString"
                      Title="@Alert.Title"
                      Message="@Alert.Message"></AlertMessage>
    }

    <div class="row mb-2">
        <div class="col-md-6">
            <h3 class="float-start">Add task:</h3>
        </div>

        <div class="col-md-6">
            <div class="mb-4 float-end">
                <h3 class="float-start">Current tasks:</h3>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6 mb-1">
            <EditForm Model="_taskInstancesParameters" OnValidSubmit="AddTaskInstancesAsync">
                <DataAnnotationsValidator/>

                @foreach (var (type, instance) in _questions)
                {
                    <div class="row mb-2">
                        <div class="p-3 border rounded">
                            <h5 class="card-title fw-bold mb-2">@type.StaticContent</h5>
                            <label class="fw-bold">Question constraint:</label>
                            <p class="card-text">@type.DynamicContentConstraint</p>
                            <InputTextArea @bind-Value="instance.Content" class="form-control mb-2" rows="3"
                                           placeholder="Question content"/>
                            <ValidationMessage For="() => instance.Content"/>
                            
                            <InputFile OnChange="@(async args => await UploadTaskImageFileAsync(args, instance))" />
                            <ValidationMessage For="() => instance.ImageSource"/>
                        </div>
                    </div>
                }

                <div>
                    <button type="submit" class="btn btn-dark mb-2">Add instance</button>
                </div>
            </EditForm>
        </div>

        <div class="col-md-6 mb-1">
            
            <p class="fw-bold float-end">
                @_fullySolvedTaskCount / @_totalTaskCount, @((_fullySolvedTaskCount / (decimal)(_totalTaskCount is 0 ? 1 : _totalTaskCount)) * 100)%
            </p>
            
            <div class="d-flex justify-content-center">
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        @foreach (var pageIndex in Enumerable.Range(1, _totalPageCount))
                        {
                            <li class="page-item @(pageIndex == Page ? "active" : string.Empty)">
                                <a class="page-link" @onclick="async () => await ReloadWithPageAsync(pageIndex)">
                                    @pageIndex
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>


            <ul class="list-group">
                @foreach (var element in _currentTasks)
                {
                    var task = element.Task;
                    
                    <li class="list-group-item mb-2">
                        <div class="btn btn-light float-start" @onclick="() => element.ChangeVisibility()">
                            @task.Id
                        </div>
                        <div class="float-end">
                            @(task.SolutionCount) / @(_taskType.SolutionsCount)
                        </div>
                    </li>

                    if (element.IsVisible)
                    {
                        @foreach (var question in task.Questions)
                        {
                            <div class="row mx-1 mb-2 border rounded">
                                <div class="col-md-8 p-3">
                                    <label class="fw-bold">Question wording:</label><br>
                                    <p>@question.QuestionWording</p>
                                    
                                    <label class="fw-bold">Content:</label><br>
                                    <p>@question.Content</p>
                                </div>
                                <div class="col-md-4 p-3">
                                    @if (question.Image is null)
                                    {
                                        <h3 class="d-flex justify-content-center text-muted">
                                            No visual data
                                        </h3>
                                    }
                                    else
                                    {
                                        <img src="@question.Image" alt="Unable to show image" class="img-fluid">
                                    }
                                </div>
                                <div class="col-md-6 p-3">
                                    <ul class="list-group">
                                        <label class="fw-bold">Answers:</label>
                                        @foreach (var answer in question.Answers)
                                        {
                                            <li class="list-group-item">
                                                <label class="fw-bold">User:</label>
                                                <p>@answer.Username</p>

                                                <label class="fw-bold">Content:</label>
                                                <p>@answer.Content</p>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div class="col-md-6 p-3">
                                    @{
                                        var emptyAnswerStatistic = new AnswerStatistic
                                        {
                                            Answer = "No aswers",
                                            Frequency = 1M
                                        };
                                        
                                        var answerStatistics = question.AnswerStatistics.Any() ?
                                            question.AnswerStatistics :
                                            new [] { emptyAnswerStatistic };

                                        var mostRelevantAnswer = question.RelevantAnswerStatistic ??
                                                                 emptyAnswerStatistic;

                                        var pieConfig = Extensions.GetPieConfig(
                                            datasetValues: answerStatistics.Select(statistic => statistic.Frequency),
                                            title: "Answer statistic:",
                                            labels: answerStatistics
                                                .Select(statistic => statistic.Answer.CutIfMoreThan(15)),
                                            colors: Extensions.GetBluePieColors());

                                        <div class="mb-2">
                                            <Chart Config="pieConfig"></Chart>
                                        </div>

                                        <label class="fw-bold">Most relevant answer:</label><br>
                                        <p>@mostRelevantAnswer.Answer</p><br>
                                    }

                                </div>
                            </div>
                        }
                    }
                }
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? IdString { get; set; }

    private int Page { get; set; } = 1;
    
    private Guid _id;
    private int _totalPageCount = 1;
    private int _totalTaskCount;
    private int _fullySolvedTaskCount;
    private const int PageSize = 50;

    private TaskType _taskType = new();
    private IReadOnlyCollection<TaskElement> _currentTasks = Array.Empty<TaskElement>();

    private TaskInstancesParameters _taskInstancesParameters = new();
    private IReadOnlyCollection<(QuestionType Type, QuestionInstanceParameters Instance)> _questions =
        Array.Empty<(QuestionType Type, QuestionInstanceParameters Instance)>();

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(IdString, out var id))
            _id = id;
        else
            NavigationManager.NavigateTo("/NotFound");
        
        _id = Guid.Parse(IdString!);
        var getTaskTypeResult = await ApiHttpClient.GetTaskTypeAsync(_id);

        if (getTaskTypeResult?.Successful is true)
        {
            _taskType = getTaskTypeResult.TaskType!;
            _questions = _taskType.QuestionTypes
                .Select(questionType => (questionType, new QuestionInstanceParameters()))
                .ToArray();
            
            _taskInstancesParameters = _taskInstancesParameters with
            {
                TaskTypeId = _id,
                QuestionDictionary = _questions
                    .ToDictionary(item => item.Type.Id, item => new[] { item.Instance }.AsReadOnlyList())
            };
            
            await LoadTasksAsync();
        }
        else
            NavigationManager.NavigateTo("/NotFound");
        
        await base.OnInitializedAsync();
    }

    private async Task AddTaskInstancesAsync()
    {
        var addTaskInstancesResult = await ApiHttpClient.AddTaskInstancesAsync(_taskInstancesParameters);

        if (addTaskInstancesResult?.Successful is true)
        {
            await ShowAlertAsync(AlertType.Success, "Task instance added successfully.");
            await LoadTasksAsync();
        }
        else
            await ShowAlertAsync(AlertType.Danger, addTaskInstancesResult?.Message ?? DefaultErrorMessage);
    }

    private async ValueTask LoadTasksAsync()
    {
        var getTaskInstancesResult = await ApiHttpClient.GetTaskInstancesAsync(_id, Page, PageSize);

        if (getTaskInstancesResult?.Successful is true)
        {
            _currentTasks = getTaskInstancesResult.Tasks
                .Select(task => new TaskElement { Task = task, IsVisible = false })
                .ToArray();
            _totalPageCount = getTaskInstancesResult.TotalPageCount;
            _totalTaskCount = getTaskInstancesResult.TotalCount;
            _fullySolvedTaskCount = getTaskInstancesResult.FullySolvedTasksCont;
        }
        else
            await ShowAlertAsync(AlertType.Danger, getTaskInstancesResult?.Message ?? DefaultErrorMessage);

        StateHasChanged();
    }
    
    private async Task UploadTaskImageFileAsync(InputFileChangeEventArgs fileChangeEventArgs,
        QuestionInstanceParameters questionInstanceParameters)
    {
        var extension = Path.GetExtension(fileChangeEventArgs.File.Name);

        if (extension is not (".jpg" or ".jpeg" or ".jpe" or ".jif" or ".jfif" or ".png"))
        {
            await ShowAlertAsync(AlertType.Danger, "Sorry, only jpeg and png file format supports.");

            return;
        }
        
        await using var fileStream = fileChangeEventArgs.File.OpenReadStream();
        await using var memoryStream = new MemoryStream();

        await fileStream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        var fileBytes = memoryStream.ToArray();
        var base64StringFile = Convert.ToBase64String(fileBytes);

        var typePart = extension switch
        {
            ".jpg" or ".jpeg" or ".jpe" or ".jif" or ".jfif" => "jpeg",
            ".png" => ".png",
            _ => throw new NotImplementedException()
        };

        var outputString = $"data:image/{typePart};charset=utf-8;base64,{base64StringFile}";
        
        questionInstanceParameters.ImageSource = outputString;
    }

    private async Task ReloadWithPageAsync(int page)
    {
        Page = page;
        await LoadTasksAsync();
    }

    private record TaskElement
    {
        public Entities.Views.Task Task { get; set; } = null!;
        
        public bool IsVisible { get; set; }
        
        public void ChangeVisibility()
        {
            IsVisible = !IsVisible;
        }
    }
}