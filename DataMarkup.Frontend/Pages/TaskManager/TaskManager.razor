@page "/TaskManager"
@inherits Base
@attribute [Authorize]

@using DataMarkup.Entities.Views
@using DataMarkup.Frontend.Models
@using Task = System.Threading.Tasks.Task

@inject ApiHttpClient ApiHttpClient;


<div class="container-fluid mt-3">

    @if (Alert.Show)
    {
        <AlertMessage AlertType="@Alert.TypeString"
                      Title="@Alert.Title"
                      Message="@Alert.Message"></AlertMessage>
    }
    
    <div class="row mb-2">
        <div class="col-md-6">
            <h3 class="float-start">Task Manager</h3>
        </div>
    </div>

    @foreach (var taskTypesRow in _taskTypes
        .Select(taskType => new TaskTypeCard
        {
            Title = taskType.Name,
            Subtitle = $"payment: {taskType.Payment}, max solutions: {taskType.SolutionsCount}",
            TextAreas = new [] { taskType.Instruction.CutIfMoreThan(70) },
            ButtonText = "To task",
            ButtonHref = $"/TaskManager/task-type/{taskType.Id}"
        })
        .Prepend(new TaskTypeCard
        {
            Title = "New task",
            Subtitle = string.Empty,
            TextAreas = new []{ "Instruction preview..." },
            ButtonText = "Create",
            ButtonHref = "/TaskManager/add-task-type"
        })
        .SepareteIntoRows(4))
    {
        <div class="row mb-3">
            @foreach (var (card, _, columnWidth) in taskTypesRow)
            {
                <CardBox Width="@columnWidth"
                         Title="@card.Title"
                         SubTitle="@card.Subtitle"
                         TextAreas="@card.TextAreas"
                         Buttons="@(new []
                                  {
                                      new CardBox.Button(CardBox.ButtonType.Secondary, card.ButtonText,
                                          Href: card.ButtonHref)
                                  })"/>
            }
        </div>
    }
</div>

@code {
    private IReadOnlyCollection<TaskType> _taskTypes = ArraySegment<TaskType>.Empty;

    protected override async Task OnInitializedAsync()
    {
        var taskTypesResult = await ApiHttpClient.GetTaskTypesAsync();

        _taskTypes = taskTypesResult!.Successful ?
            taskTypesResult.TaskTypes :
            Array.Empty<TaskType>();

        await base.OnInitializedAsync();
    }

    private record TaskTypeCard : Card
    {
        public string ButtonHref { get; init; } = null!;
    }
}